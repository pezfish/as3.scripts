package net.abp.capture {	//import	import flash.net.NetConnection;	import flash.net.NetStream;		import flash.media.Camera;	import flash.media.Microphone;		import flash.events.Event;	import flash.events.NetStatusEvent;	import flash.events.EventDispatcher;		public class VideoCapture extends EventDispatcher  {		private static var _nc:NetConnection;		private static var _ns:NetStream;		private static var _client:Object;		public static var statusCode:String;		public static var dispatcher:EventDispatcher;		public static const HAS_CONNECTION:String = "has connection";		public static const CONNECTION_FAILED:String = "connection failed";				public static function connect(url:String):void {			_client = new Object();						_nc = new NetConnection();			_nc.connect(url, true);			_nc.client = _client;			_nc.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);						function netStatusHandler(event:NetStatusEvent):void {				statusCode = event.info.code;				if(statusCode == "NetConnection.Connect.Success"){ 					_ns = new NetStream(_nc);					dispatchEvent(new Event(VideoCapture.HAS_CONNECTION));				} else {					dispatchEvent(new Event(VideoCapture.CONNECTION_FAILED));				}			}		}				public static function record(camera:Camera, mic:Microphone, fileName:String):void {				_ns.attachCamera(camera);				_ns.attachAudio(mic);				_ns.publish(fileName, 'record');		}				public static function stop():void {			_ns.close();		}				public static function addEventListener(type:String, listener:Function, useCapture:Boolean=false, priority:int=0, useWeakReference:Boolean=false):void {			if (dispatcher == null) { dispatcher = new EventDispatcher(); }			dispatcher.addEventListener(type, listener, useCapture, priority, useWeakReference);		}				public static function removeEventListener(type:String, listener:Function, useCapture:Boolean=false):void {			if (dispatcher == null) { return; }			dispatcher.removeEventListener(type, listener, useCapture);		}				public static function dispatchEvent(event:Event):void {			if (dispatcher == null) { return; }			dispatcher.dispatchEvent(event);		}					}}