package net.abp.input {	//import	import flash.text.TextField;	import flash.events.MouseEvent;	import flash.display.MovieClip;	import flash.display.DisplayObject;	import flash.events.Event;	import flash.events.EventDispatcher;		public class ScreenKeyboard extends EventDispatcher {		//var		private var _field:TextField;		private var _clip:MovieClip;		private var _character:String;		private var _keyboard:Array;		private var _shift:Boolean;				public static const LOWER_CASE:Array = [									["q","w","e","r","t","y","u","i","o","p"],									["a","s","d","f","g","h","j","k","l","@"],									["shift","z","x","c","v","b","n","m",".com"],									["numeric"," ","delete"]									];				public static const UPPER_CASE:Array = [									["Q","W","E","R","T","Y","U","I","O","P"],									["A","S","D","F","G","H","J","K","L","@"],									["shift","Z","X","C","V","B","N","M",".com"],									["numeric"," ","delete"]									];		public static const NUMERIC:Array = [									["1","2","3","4","5","6","7","8","9","0"],									["-","/",":",";","(",")","$","&","@","\""],									["+","=",".",",","?","!","'",".com"],									["alpha"," ","delete"]									];				public function ScreenKeyboard() {			//init		}				public function start():void {			setupKeyboard(LOWER_CASE);		}				public function switchLayout(keyboard:Array): void {			setupKeyboard(keyboard);		}				private function setupKeyboard(keyboard:Array):void {			var layout:String;			switch(keyboard){				case LOWER_CASE:					layout = "LOWER_CASE";					_keyboard = LOWER_CASE;					break;				case UPPER_CASE:					layout = "UPPER_CASE";					_keyboard = UPPER_CASE;					break;				case NUMERIC:					layout = "NUMERIC";					_keyboard = NUMERIC;					break;			}			_clip.gotoAndStop(layout);			var numKeys:int = _clip.numChildren;			for(var i:int = 0; i<numKeys; i++){				var current:MovieClip = MovieClip(_clip.getChildAt(i));				current.addEventListener(MouseEvent.CLICK, onClick);				current.buttonMode = true;				current.mouseChildren = false;				if(current.char_txt){					current.char_txt.text = getCharacter(current.name);				}				current = null; //--- cleanup			}			layout = null; //--- cleanup		}				private function onClick(event:MouseEvent):void {			var target:String = getCharacter(event.target.name);			var temp:String = _field.text;			var index:int = _field.caretIndex;			var limit:int = _field.length;			var selectionStart:int = _field.selectionBeginIndex;			var selectionEnd:int = _field.selectionEndIndex;			var numSelected:int = selectionEnd - selectionStart;			switch(target) {				case "shift": 					if(!_shift){						setupKeyboard(UPPER_CASE);						_shift = true;					} else {						setupKeyboard(LOWER_CASE);						_shift = false;					}					break;				case "numeric":					setupKeyboard(NUMERIC);					break;				case "alpha":					setupKeyboard(LOWER_CASE);					break;								case "delete":					if(numSelected > 0){						_field.text = temp.substr(0, selectionStart) + temp.substr(selectionEnd, limit);					} else {						if(index != 0){							_field.text = temp.substr(0, index);						} else {							_field.text = temp.substr(0, 0);						}					}					_field.dispatchEvent(new Event(Event.CHANGE));					break;				default:					if(_field.maxChars == 0 || _field.maxChars > _field.length){						if(numSelected > 0){							_field.text = temp.substr(0,selectionStart)+target+temp.substr(selectionEnd,limit);						} else {							if(index+1==limit){								_field.appendText(target);							} else if(index==0) {								_field.text = target+temp;							} else {								_field.text = temp.substr(0,index)+target+temp.substr(index,limit);							}						}						if(_shift){							setupKeyboard(LOWER_CASE);							_shift = false;						}						_field.dispatchEvent(new Event(Event.CHANGE));					}					break;			}						setCaret();						target = null; //--- cleanup			temp = null; //--- cleanup		}				private function setCaret():void {			_field.setSelection(_field.length - 1, _field.length - 1);		}				private function getCharacter(current:Object):String {			var clipName:Object = String(current);			clipName = clipName.split("_");			var row:int = clipName[0].substr(1,1);			var key:int = clipName[1].substr(1,1);			clipName = null; //--- cleanup			return _keyboard[row][key];		}				public function set container(clip:MovieClip):void {			_clip = clip;		}				public function get container():MovieClip {			return _clip;		}				public function set field(tf:TextField):void {			_field = tf;		}				public function get field():TextField {			return _field;		}	}}