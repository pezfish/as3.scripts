package net.abp.utils {	//import	import flash.utils.Timer;	import flash.events.TimerEvent;	import flash.display.Stage;	import flash.text.TextField;	import flash.text.TextFormat;	import flash.text.TextFieldAutoSize;	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.display.Loader;	import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.net.URLRequest;	import flash.net.navigateToURL;	import flash.geom.Matrix;	import flash.display.DisplayObjectContainer;		public class Utilities {		public static function generateRandomString(newLength:uint = 5, userAlphabet:String = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"):String {			var alphabet:Array=userAlphabet.split("");			var alphabetLength:int=alphabet.length;			var randomLetters:String="";			for (var i:uint = 0; i < newLength; i++) {				randomLetters+=alphabet[int(Math.floor(Math.random()*alphabetLength))];			}			return randomLetters;		}		public static function validateEmail(address:String):Boolean {			var emailExpression:RegExp = /^([a-zA-Z0-9._%-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4})*$/;			return emailExpression.test(address);		}				public static function validateZipcode(zip:String):Boolean {			var zipExpression:RegExp = /^([0-9]{5}(?:-[0-9]{4})?)*$/;			return zipExpression.test(zip);		}				public static function validateState(s:String):Boolean {			var valid:Boolean = false;			var states:Array = [				"AL","AK","AZ","AR","CA","CO","CT","DE","DC","FL","GA","HI","ID","IL","IN","IA","KS","KY","LA","ME",				"MD","MA","MI","MN","MS","MO","MT","NE","NV","NH","NJ","NM","NY","NC","ND","OH","OK","OR","PA","RI",				"SC","SD","TN","TX","UT","VT","VA","WA","WV","WI","WY"			];			valid = (states.indexOf(s.toUpperCase()) != -1)?(true):(false);			return valid;		}				public static function scaleText(tf:TextField, max:int = 127):void {			tf.wordWrap = true;			var maxWidth:int = tf.width; 			var maxHeight:int = tf.height; 			var f:TextFormat = tf.getTextFormat();			f.size = max;			tf.setTextFormat(f);						while (tf.textHeight > maxHeight) {				f.size = int(f.size) - 1;				tf.setTextFormat(f);			}			f.size = int(f.size) - 1;			tf.setTextFormat(f);			tf.autoSize = TextFieldAutoSize.LEFT;		}			public static function jsAlert(arg):void {			navigateToURL(new URLRequest("javascript:alert('"+arg+"')"),"_self");		}				public static function jsConsole(arg):void {			navigateToURL(new URLRequest("javascript:console.log('"+arg+"')"),"_self");		}			public static function loadAsBitmap(imageToLoad:String, loaderClip:DisplayObjectContainer, smoothing:Boolean = true, callback:Function = null):void {			var loader:Loader = new Loader();			var loadedImage:Bitmap;			var bitmap:BitmapData;			var image:Bitmap;			loader.contentLoaderInfo.addEventListener(Event.INIT, initListener);			loader.contentLoaderInfo.addEventListener(Event.COMPLETE, completeListener);			loader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, IOErrorListener);			loader.load(new URLRequest(imageToLoad));			function initListener(event:Event):void {				loadedImage = Bitmap(loader.content);				bitmap = new BitmapData(loadedImage.width,loadedImage.height,true,0x00FFFFFF);				bitmap.draw(loadedImage, new Matrix(  ));				image = new Bitmap(bitmap);				image.smoothing=smoothing;				loaderClip.addChild(image);				(callback!=null)?(callback()):(null);			}						function completeListener(event:Event):void {				loader = null;				loadedImage = null;				bitmap = null;				image = null;			}						function IOErrorListener(event:Event):void {				throw new Error("FILE NOT FOUND: "+imageToLoad);			}		}	}}