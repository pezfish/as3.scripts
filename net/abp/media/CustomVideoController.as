package net.abp.media {	import net.abp.media.CustomVideoPlayer;	import flash.display.DisplayObjectContainer;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.display.MovieClip;	import Error;	import net.abp.ui.CustomScrollBar;	import net.abp.ui.events.ScrollBarEvent;	public class CustomVideoController {		private var _data:Array = [];		private var _player:CustomVideoPlayer;		private const CONTROL_TYPES:Array = ["play_pause", "close", "restart", "stop", "preload", "playhead_scrubber", "volume_scrubber", "mute"];				public function CustomVideoController(player:CustomVideoPlayer) {			_player = player;		}				public function addControl(type:String, name:DisplayObjectContainer, callback:Function = null):void {			var index:int = _data.length;			if(checkType(type)){				_data[index] = {controlType:type, container:name};				setupControl(index, callback);			} else {				throw new Error("Video Control Type: "+ type + " not found.\n\tCurrent controls available are [ " + CONTROL_TYPES + " ]");			}		}				private function checkType(type:String):Boolean {			var temp:String = type;			var valid:Boolean = false;			var numControls = CONTROL_TYPES.length;			for(var i:int; i<numControls; i++){				if(CONTROL_TYPES[i] == temp){					valid = true;				}			}			return valid;		}				private function setupControl(num:int, callback:Function):void {			var current:Object = _data[num];			var control:Object = current.controlType;			switch(control){				case "play_pause":					initPlayPause(current.container, callback);					break;				case "close":					initClose(current.container, callback);					break;				case "restart":					initRestart(current.container, callback);					break;				case "stop":					initStop(current.container, callback);					break;				case "preload":					initPreload(current.container, callback);					break;				case "playhead_scrubber":					initPlayheadScrubber(current.container, callback);					break;				case "volume_scrubber":					initVolumeScrubber(current.container, callback);					break;				case "mute":					initMuteToggle(current.container, callback);					break;			}		}				private function initPlayPause(container:DisplayObjectContainer, callback:Function):void {			MovieClip(container).buttonMode = true;			container.addEventListener(MouseEvent.CLICK, onClick);			function onClick(event:MouseEvent):void {				_player.pause();				(callback!=null)?(callback()):(null);			}		}		private function initClose(container:DisplayObjectContainer, callback:Function):void {			MovieClip(container).buttonMode = true;			container.addEventListener(MouseEvent.CLICK, onClick);			function onClick(event:MouseEvent):void {				_player.close();				(callback!=null)?(callback()):(null);			}		}				private function initRestart(container:DisplayObjectContainer, callback:Function):void {			MovieClip(container).buttonMode = true;			container.addEventListener(MouseEvent.CLICK, onClick);			function onClick(event:MouseEvent):void {				_player.restart();				(callback!=null)?(callback()):(null);			}		}		private function initStop(container:DisplayObjectContainer, callback:Function):void {			MovieClip(container).buttonMode = true;			container.addEventListener(MouseEvent.CLICK, onClick);			function onClick(event:MouseEvent):void {				_player.seek(0);				_player.pause();				(callback!=null)?(callback()):(null);			}		}		private function initPreload(container:DisplayObjectContainer, callback:Function):void {			MovieClip(container).buttonMode = true;			container.addEventListener(Event.ENTER_FRAME, onFrame);			function onFrame(event:Event):void {				if(_player.loadPercentage >= 1){					container.scaleX = 1;					container.removeEventListener(Event.ENTER_FRAME, onFrame);				} else {					container.scaleX = _player.loadPercentage;					(callback!=null)?(callback()):(null);				}			}		}				private function initPlayheadScrubber(container:DisplayObjectContainer, callback:Function):void {			MovieClip(container).buttonMode = true;			var scrollbar:CustomScrollBar = new CustomScrollBar(MovieClip(container));			scrollbar.addEventListener(ScrollBarEvent.UPDATE, scrollUpdate);						function scrollUpdate(event:ScrollBarEvent):void {				var n:Number = event.scroll_value;				_player.seek(n*_player.duration);				(callback!=null)?(callback()):(null);			}								scrollbar.addEventListener(ScrollBarEvent.SCROLL_START, scrollPress);			function scrollPress(event:ScrollBarEvent):void {				scrollbar.removeEventListener(Event.ENTER_FRAME, onFrame);			}						scrollbar.addEventListener(ScrollBarEvent.SCROLL_STOP, scrollRelease);			function scrollRelease(event:ScrollBarEvent):void {				scrollbar.addEventListener(Event.ENTER_FRAME, onFrame);			}						scrollbar.addEventListener(Event.ENTER_FRAME, onFrame);			function onFrame(event:Event):void {				scrollbar.limitScroll(_player.loadPercentage);				scrollbar.forcePosition(_player.playheadPercentage);				(callback!=null)?(callback()):(null);			}		}				private function initVolumeScrubber(container:DisplayObjectContainer, callback:Function):void {			MovieClip(container).buttonMode = true;			var scrollbar:CustomScrollBar = new CustomScrollBar(MovieClip(container));			scrollbar.forcePosition(_player.volume);			scrollbar.addEventListener(ScrollBarEvent.UPDATE, scrollUpdate);			function scrollUpdate(event:ScrollBarEvent):void {				var n:Number = event.scroll_value;				_player.volume = n;				(callback!=null)?(callback()):(null);			}				}		private function initMuteToggle(container:DisplayObjectContainer, callback:Function):void {			MovieClip(container).buttonMode = true;			container.addEventListener(MouseEvent.CLICK, onClick);			function onClick(event:MouseEvent):void {				if(_player.volume != 0){					_player.tempVolume = _player.volume;				}				_player.volume = (_player.volume != 0)?(0):(_player.tempVolume);				(callback!=null)?(callback()):(null);			}		}	}}