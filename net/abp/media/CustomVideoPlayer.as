package net.abp.media {	//import	import flash.display.Sprite;	import flash.display.DisplayObject;	import flash.display.DisplayObjectContainer;	import flash.events.MouseEvent;	import flash.events.NetStatusEvent;	import flash.net.NetConnection;	import flash.net.NetStream;	import flash.media.Video;	import flash.media.SoundTransform;	import flash.events.Event;	import flash.utils.Timer;	import flash.events.TimerEvent;		public class CustomVideoPlayer extends Sprite {		//var		private var _container:DisplayObjectContainer;		private var _netconnection:NetConnection;		private var _netstream:NetStream;		private var _video:Video;		private var _netclient:Object;		private var _soundtransform:SoundTransform;		private var _volume:Number;		private var _duration:Number;		private var _src:String;		public var tempVolume:Number;				//config		private var _autostart:Boolean;		private var _scalemode:String;		private var _buffer:Boolean;		private var _scaleMethod:String;				//events		public static const VIDEO_INIT:String = "video initialized";		public static const VIDEO_COMPLETE:String = "video complete";		public static const VIDEO_START:String = "video start";		public static const VIDEO_MISSING:String = "video not found";						public function CustomVideoPlayer(display:DisplayObjectContainer) {			_container = display;						_netconnection = new NetConnection();			_netconnection.connect(null);			_netconnection.addEventListener(NetStatusEvent.NET_STATUS, netStatus);						_netstream = new NetStream(_netconnection);			_netstream.addEventListener(NetStatusEvent.NET_STATUS, netStatus);									_soundtransform = _netstream.soundTransform;		}				private function netStatus(event:NetStatusEvent):void {			trace(event.info.code);			switch(event.info.code) {				case "NetStream.Play.Start":					dispatchEvent(new Event(CustomVideoPlayer.VIDEO_START));					break;				case "NetStream.Play.Stop":					dispatchEvent(new Event(CustomVideoPlayer.VIDEO_COMPLETE));					break;				case "NetStream.Play.StreamNotFound":					dispatchEvent(new Event(CustomVideoPlayer.VIDEO_MISSING));					break;			}		}				private function onMetaData(metadata:Object):void {			_duration = metadata.duration;					}							private function checkAutoStart():void {			if(!_autostart){				this.seek(0);				this.pause();							}		}				private function setVideoSize():void {			var delay:Timer = new Timer(20);			delay.addEventListener(TimerEvent.TIMER, onTimer);			delay.start();			function onTimer(event:TimerEvent):void {				if(_video.videoHeight != 0 || _video.videoWidth != 0){					delay.stop();					delay.removeEventListener(TimerEvent.TIMER, onTimer);					if(_scaleMethod == "normal") {						_video.height = _video.videoHeight;						_video.width = _video.videoWidth;					} else if(_scaleMethod == "fitToContainer") {						_video.height = _container.height;						_video.width = _container.width;					}				} 			}		}				// PUBLIC METHODS		public function config(options:Object):void {			if(options.autostart){				_autostart = (options.autostart == true) ? (true):(false);			} else {				_autostart = false;			}						if(options.volume){				_volume = options.volume;			} else {				_volume = 0.6;			}						if(options.scaleMethod){				_scaleMethod = options.scaleMethod;			} else {				_scaleMethod = "normal";			} 		}				public function play(url:String):void {			_src = url;			_video = new Video();			_video.attachNetStream(_netstream);			_netstream.play(_src);			_container.addChild(_video);						_netclient = new Object();			_netclient.onMetaData = onMetaData;			_netstream.client = _netclient;						this.volume = _volume;						setVideoSize();			checkAutoStart();		}				public function pause():void {			_netstream.togglePause();		}				public function close():void {			_netstream.close();		}				public function restart():void {			_netstream.play(_src);		}				public function seek(amt:Number):void {			_netstream.seek(amt);		}		public function set volume(amt:Number):void {			_volume = amt;			_soundtransform.volume = _volume;			_netstream.soundTransform = _soundtransform;		}				// PUBIC PROPERTIES				public function get volume():Number {			return _volume;		}		public function get src():String {			return _src;		}				public function get time():Number {			return _netstream.time;		}				public function get duration():Number {			return _duration;		}				public function get playheadPercentage():Number {			return _netstream.time / _duration;		}				public function get loadPercentage():Number {			return _netstream.bytesLoaded / _netstream.bytesTotal;		}	}}